import java.sql.*;
import java.util.HashMap;
import java.util.Map;

public class DatabaseHelper {
    private static final String DB_URL = "jdbc:mysql://localhost:3306/reservation_system";
    private static final String USER = "root";
    private static final String PASS = "password";
    
    private Map<String, String> reservations = new HashMap<>();

    public DatabaseHelper() {
        // Load MySQL driver
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public Connection connect() {
        try {
            return DriverManager.getConnection(DB_URL, USER, PASS);
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void addReservation(String pnr, String fullName) {
        reservations.put(pnr, fullName); // Storing in HashMap

        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement("INSERT INTO reservations (pnr, fullname) VALUES (?, ?)")) {
            stmt.setString(1, pnr);
            stmt.setString(2, fullName);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public String getReservation(String pnr) {
        if (reservations.containsKey(pnr)) {
            return reservations.get(pnr); // Retrieve from HashMap
        }

        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement("SELECT fullname FROM reservations WHERE pnr = ?")) {
            stmt.setString(1, pnr);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String fullName = rs.getString("fullname");
                reservations.put(pnr, fullName); // Cache in HashMap
                return fullName;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }

    public void cancelReservation(String pnr) {
        reservations.remove(pnr); // Remove from HashMap

        try (Connection conn = connect();
             PreparedStatement stmt = conn.prepareStatement("DELETE FROM reservations WHERE pnr = ?")) {
            stmt.setString(1, pnr);
            stmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
/////Data base helper 

import java.util.Random;
import java.util.Scanner;

public class OnlineReservationSystem {
    private static DatabaseHelper dbHelper = new DatabaseHelper();
    private static Random random = new Random();

    public static void register() {
        Scanner sc = new Scanner(System.in);
        System.out.println("------Register------");

        System.out.print("Full name: ");
        String fullName = sc.nextLine();
        
        System.out.print("Create Password: ");
        String createPassword = sc.nextLine();

        login(sc, fullName, createPassword);
    }

    public static void login(Scanner sc, String fullName, String createPassword) {
        System.out.println("------Login------");
        System.out.print("Enter username: ");
        String userName = sc.nextLine();

        System.out.print("Enter password: ");
        String password = sc.nextLine();

        if (fullName.equals(userName) && createPassword.equals(password)) {
            System.out.println("Login Successful!");
            fillDetails(sc);
        } else {
            System.out.println("Login failed. Incorrect username or password");
            login(sc, fullName, createPassword);
        }
    }

    public static void fillDetails(Scanner sc) {
        System.out.println("------Reservation Form------");

        System.out.print("Enter train number: ");
        String trainNumber = sc.nextLine();

        System.out.print("Enter your full name: ");
        String fullName = sc.nextLine();

        String pnr = generatePNR();
        dbHelper.addReservation(pnr, fullName);  // Storing reservation

        System.out.println("Reservation confirmed! Your PNR is: " + pnr);
        showMenu(sc, pnr);
    }

    public static void showMenu(Scanner sc, String pnr) {
        System.out.println("------Menu------");
        System.out.println("1. View Reservation");
        System.out.println("2. Cancel Reservation");
        System.out.print("Enter your choice: ");
        int choice = sc.nextInt();
        sc.nextLine();

        switch (choice) {
            case 1:
                String reservation = dbHelper.getReservation(pnr);
                if (reservation != null) {
                    System.out.println("Reservation for PNR " + pnr + " is under the name: " + reservation);
                } else {
                    System.out.println("No reservation found with PNR: " + pnr);
                }
                break;
            case 2:
                dbHelper.cancelReservation(pnr);
                System.out.println("Reservation cancelled successfully.");
                break;
            default:
                System.out.println("Invalid choice.");
        }
    }

    public static String generatePNR() {
        return "PNR" + random.nextInt(100000);
    }

    public static void main(String[] args) {
        register();
    }
}
//// OnlineReservationSystem.java
